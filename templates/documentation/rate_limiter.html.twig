{% extends 'docs.html.twig' %}

{% block title %}Aeon PHP - Rate Limiter - Documentation{% endblock %}

{% block body %}
    <div class="row doc-content-body">
        <article class="col-md-9">
            <section id="calendar-interface">
                <h5 class="section-title-2">Rate Limiter</h5>
                <hr/>
                Available versions:
                <ul>
                    {% for version, src in versions %}
                        <li><a href="{{ path('docs_rate_limiter_version', { version: version }) }}">{{ version }}</a></li>
                    {% endfor %}
                </ul>
            </section>
            <section>
                <h3>Installation</h3>
                <p>
                    <code class="code">composer require aeon-php/rate-limiter</code>
                </p>
            </section>
            <section>
                <h3>Description</h3>

                <p>
                    RateLimiter components makes it possible to limit frequency of operations execution.
                </p>
                <p>
                    Following example shows how to use <a href="https://en.wikipedia.org/wiki/Leaky_bucket" target="_blank">Leaky Bucket</a> algorithm
                    with Rate Limiter. This configuration will let 5 immediate executions with restore rate 1 execution every minute.
                    It's recommended to replace <code>Symfony\Component\Cache\Adapter\ArrayAdapter</code> (in memory) adapter used by <code>PSRCacheStorage</code>
                    with a more permanent storage, like for example Redis.
                </p>
                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php

$calendar = GregorianCalendar::UTC();

$rateLimiter = new RateLimiter(
    new LeakyBucketAlgorithm(
        $calendar,
        $bucketSize = 5,
        $leakSize = 1,
        $leakTime = TimeUnit::minute()
    ),
    new PSRCacheStorage(
        new ArrayAdapter(),
        $calendar
    )
);

$rateLimiter->hit('operation.id');
$rateLimiter->hit('operation.id');
$rateLimiter->hit('operation.id');
$rateLimiter->hit('operation.id');
$rateLimiter->hit('operation.id');
try {
    $rateLimiter->hit('operation.id');
} catch (RateLimitException $exception) {
    echo "Rate limit exceeded, please wait {$exception->retryIn()->inSecondsPrecise()} seconds";
}

// this will put process into sleep for next ~59 seconds
$rateLimiter->throttle('operation.id', SystemProcess::current());
{% endapply %}</code></pre>
                <p>
                    Rate Limiter implements following limiting algorithms:
                </p>
                <ul>
                    <li>
                        <a href="{{ path('docs_rate_limiter_class', {'version': '1.x', 'classSlug': 'algorithm-leakybucketalgorithm'}) }}">LeakyBucketAlgorithm</a>
                    </li>
                    <li>
                        <a href="{{ path('docs_rate_limiter_class', {'version': '1.x', 'classSlug': 'algorithm-slidingwindowalgorithm'}) }}">SlidingWindowAlgorithm</a>
                    </li>
                </ul>

                <p>
                    Rate Limiter implements following types of storage
                </p>
                <ul>
                    <li>MemoryStorage</li>
                    <li>PSRCacheStorage</li>
                </ul>

                <p>
                    It's worth to mention that PSRCacheStorage works perfectly fine with any caching library that
                    implements <a href="https://www.php-fig.org/psr/psr-6/" target="_blank">PSR-6: Caching Interface</a>.
                    Most of available PSR-6 implementations can be found at <a href="https://packagist.org/providers/psr/cache-implementation" target="_blank">packagist</a>.
                </p>

                <p>
                    RateLimiter API is pretty much self-explanatory
                </p>

                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php

namespace Aeon\RateLimiter;

final class RateLimiter
{
    /**
     * Record next hit, throws an extension where there are no available hits left according to the selected algorithm.
     *
     * @throws \Aeon\RateLimiter\Exception\RateLimitException
     */
    public function hit(string $id) : void;

    /**
     * Estimate time required to the next hit. If current capacity is greater than 0, time will be 0.
     */
    public function estimate(string $id) : TimeUnit;

    /**
     * Returns current capacity according to the selected algorithm, when there are no available hits left, it will return 0.
     * Use RateLimiter::estimate method to find out when next hit will be possible.
     */
    public function capacity(string $id) : int;

    /**
     * Initial available capacity before registering any hits or when all hits time out.
     */
    public function capacityInitial() : int;

    /**
     * Time required to fully reset to the total capacity.
     */
    public function resetIn(string $id) : TimeUnit;

    /**
     * Try to record next hit, in case of rate limit exception take the cooldown time and sleep current process.
     */
    public function throttle(string $id, Process $process) : void;
}

{% endapply %}</code></pre>

                <p>
                    <code>RateLimitException</code> does not only tell you that the execution is forbidden, it also
                    says how long you should wait.
                </p>

                <pre><code class="language-php">{% apply spaceless  %}
&lt;?php

    public function throttle(string $id, Process $process) : void
    {
        try {
            $this->algorithm->hit($id, $this->storage);
        } catch (RateLimitException $rateLimitException) {
            $process->sleep($rateLimitException->cooldown());
            $this->algorithm->hit($id, $this->storage);
        }
    }

{% endapply %}</code></pre>

            </section>
        </article>
        <aside class="col-md-3">
            <div class="sticky">
                <section class="text-center">
                    <a href="https://github.com/aeon-php/website/blob/1.x/templates/{{ _self }}" class="btn btn-secondary p-1" target="_blank"><i class="fab fa-github"></i> Edit this page</a>
                </section>
            </div>
        </aside>
    </div>
{% endblock %}
